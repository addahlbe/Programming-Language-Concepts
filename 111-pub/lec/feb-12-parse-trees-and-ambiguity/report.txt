(Termination of the reorganizing TRS: true)

(Local confluence of the reorganizing TRS: true)

(The nondeterministic automaton:
(Automaton
(Start state: 0 : [s1])
(Final states: 1 : [s1'end])
(Number of states 27)
(Transitions:
26 : [s1 -> s . s1_opt_1 ; s1_opt_1 -> . ws ; ws -> '\n' .] ----> 23 : [s1 -> s . s1_opt_1 ; s1_opt_1 -> . ws ; ws'end]
25 : [s1 -> s . s1_opt_1 ; s1_opt_1 -> . ws ; ws -> '\t' .] ----> 23 : [s1 -> s . s1_opt_1 ; s1_opt_1 -> . ws ; ws'end]
24 : [s1 -> s . s1_opt_1 ; s1_opt_1 -> . ws ; ws -> ' ' .] ----> 23 : [s1 -> s . s1_opt_1 ; s1_opt_1 -> . ws ; ws'end]
23 : [s1 -> s . s1_opt_1 ; s1_opt_1 -> . ws ; ws'end] ----> 22 : [s1 -> s . s1_opt_1 ; s1_opt_1 -> . ws ; ws]
23 : [s1 -> s . s1_opt_1 ; s1_opt_1 -> . ws ; ws'end] ----> 21 : [s1 -> s . s1_opt_1 ; s1_opt_1'end]
22 : [s1 -> s . s1_opt_1 ; s1_opt_1 -> . ws ; ws] -- '\t' --> 25 : [s1 -> s . s1_opt_1 ; s1_opt_1 -> . ws ; ws -> '\t' .]
22 : [s1 -> s . s1_opt_1 ; s1_opt_1 -> . ws ; ws] -- '\n' --> 26 : [s1 -> s . s1_opt_1 ; s1_opt_1 -> . ws ; ws -> '\n' .]
22 : [s1 -> s . s1_opt_1 ; s1_opt_1 -> . ws ; ws] -- ' ' --> 24 : [s1 -> s . s1_opt_1 ; s1_opt_1 -> . ws ; ws -> ' ' .]
21 : [s1 -> s . s1_opt_1 ; s1_opt_1'end] ----> 1 : [s1'end]
20 : [s1 -> s . s1_opt_1 ; s1_opt_1] ----> 21 : [s1 -> s . s1_opt_1 ; s1_opt_1'end]
20 : [s1 -> s . s1_opt_1 ; s1_opt_1] ----> 22 : [s1 -> s . s1_opt_1 ; s1_opt_1 -> . ws ; ws]
19 : [s1 -> . s s1_opt_1 ; s -> opt_ws '(' s opt_ws ')' .] ----> 3 : [s1 -> . s s1_opt_1 ; s'end]
18 : [s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws -> . ws ; ws -> '\n' .] ----> 15 : [s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws -> . ws ; ws'end]
17 : [s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws -> . ws ; ws -> '\t' .] ----> 15 : [s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws -> . ws ; ws'end]
16 : [s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws -> . ws ; ws -> ' ' .] ----> 15 : [s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws -> . ws ; ws'end]
15 : [s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws -> . ws ; ws'end] ----> 14 : [s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws -> . ws ; ws]
15 : [s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws -> . ws ; ws'end] ----> 13 : [s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws'end]
14 : [s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws -> . ws ; ws] -- '\t' --> 17 : [s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws -> . ws ; ws -> '\t' .]
14 : [s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws -> . ws ; ws] -- '\n' --> 18 : [s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws -> . ws ; ws -> '\n' .]
14 : [s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws -> . ws ; ws] -- ' ' --> 16 : [s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws -> . ws ; ws -> ' ' .]
13 : [s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws'end] -- ')' --> 19 : [s1 -> . s s1_opt_1 ; s -> opt_ws '(' s opt_ws ')' .]
12 : [s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws] ----> 13 : [s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws'end]
12 : [s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws] ----> 14 : [s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws -> . ws ; ws]
11 : [s1 -> . s s1_opt_1 ; s -> opt_ws '(' . s opt_ws ')'] ----> 2 : [s1 -> . s s1_opt_1 ; s]
10 : [s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws -> . ws ; ws -> '\n' .] ----> 7 : [s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws -> . ws ; ws'end]
9 : [s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws -> . ws ; ws -> '\t' .] ----> 7 : [s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws -> . ws ; ws'end]
8 : [s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws -> . ws ; ws -> ' ' .] ----> 7 : [s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws -> . ws ; ws'end]
7 : [s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws -> . ws ; ws'end] ----> 6 : [s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws -> . ws ; ws]
7 : [s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws -> . ws ; ws'end] ----> 5 : [s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws'end]
6 : [s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws -> . ws ; ws] -- '\t' --> 9 : [s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws -> . ws ; ws -> '\t' .]
6 : [s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws -> . ws ; ws] -- '\n' --> 10 : [s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws -> . ws ; ws -> '\n' .]
6 : [s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws -> . ws ; ws] -- ' ' --> 8 : [s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws -> . ws ; ws -> ' ' .]
5 : [s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws'end] -- '(' --> 11 : [s1 -> . s s1_opt_1 ; s -> opt_ws '(' . s opt_ws ')']
4 : [s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws] ----> 5 : [s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws'end]
4 : [s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws] ----> 6 : [s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws -> . ws ; ws]
3 : [s1 -> . s s1_opt_1 ; s'end] ----> 2 : [s1 -> . s s1_opt_1 ; s]
3 : [s1 -> . s s1_opt_1 ; s'end] ----> 12 : [s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws]
3 : [s1 -> . s s1_opt_1 ; s'end] ----> 20 : [s1 -> s . s1_opt_1 ; s1_opt_1]
2 : [s1 -> . s s1_opt_1 ; s] ----> 3 : [s1 -> . s s1_opt_1 ; s'end]
2 : [s1 -> . s s1_opt_1 ; s] ----> 4 : [s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws]
0 : [s1] ----> 2 : [s1 -> . s s1_opt_1 ; s]
))

(Items associated with NFA states:
0 :(
[s1])
1 :(
[s1'end])
2 :(
[s1 -> . s s1_opt_1 ; s])
3 :(
[s1 -> . s s1_opt_1 ; s'end])
4 :(
[s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws])
5 :(
[s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws'end])
6 :(
[s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws -> . ws ; ws])
7 :(
[s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws -> . ws ; ws'end])
8 :(
[s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws -> . ws ; ws -> ' ' .])
9 :(
[s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws -> . ws ; ws -> '\t' .])
10 :(
[s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws -> . ws ; ws -> '\n' .])
11 :(
[s1 -> . s s1_opt_1 ; s -> opt_ws '(' . s opt_ws ')'])
12 :(
[s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws])
13 :(
[s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws'end])
14 :(
[s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws -> . ws ; ws])
15 :(
[s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws -> . ws ; ws'end])
16 :(
[s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws -> . ws ; ws -> ' ' .])
17 :(
[s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws -> . ws ; ws -> '\t' .])
18 :(
[s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws -> . ws ; ws -> '\n' .])
19 :(
[s1 -> . s s1_opt_1 ; s -> opt_ws '(' s opt_ws ')' .])
20 :(
[s1 -> s . s1_opt_1 ; s1_opt_1])
21 :(
[s1 -> s . s1_opt_1 ; s1_opt_1'end])
22 :(
[s1 -> s . s1_opt_1 ; s1_opt_1 -> . ws ; ws])
23 :(
[s1 -> s . s1_opt_1 ; s1_opt_1 -> . ws ; ws'end])
24 :(
[s1 -> s . s1_opt_1 ; s1_opt_1 -> . ws ; ws -> ' ' .])
25 :(
[s1 -> s . s1_opt_1 ; s1_opt_1 -> . ws ; ws -> '\t' .])
26 :(
[s1 -> s . s1_opt_1 ; s1_opt_1 -> . ws ; ws -> '\n' .])
)
(Prules associated with NFA states:
(0 :
 S1 : s s1_opt_1 -> s1
)
(2 :
 S : opt_ws #'(' s opt_ws #')' -> s
 S/1 : -> s
 S/2 : s s -> s
)
(4 :
 odot : -> opt_ws
 odot : ws -> opt_ws
)
(6 :
 odot : ' ' -> ws
 odot : '\n' -> ws
 odot : '\t' -> ws
 odot : ws ws -> ws
)
(12 :
 odot : -> opt_ws
 odot : ws -> opt_ws
)
(14 :
 odot : ' ' -> ws
 odot : '\n' -> ws
 odot : '\t' -> ws
 odot : ws ws -> ws
)
(20 :
 S1_0 : ws -> s1_opt_1
 S1_1 : -> s1_opt_1
)
(22 :
 odot : ' ' -> ws
 odot : '\n' -> ws
 odot : '\t' -> ws
 odot : ws ws -> ws
)
))

(The deterministic automaton:
(Automaton
(Start state: 0)
(Final states: 5 4 3 2 1 0)
(Number of states 6)
(Transitions:
5 -- '\t' --> 5
5 -- '\n' --> 4
5 -- ')' --> 3
5 -- '(' --> 2
5 -- ' ' --> 1
4 -- '\t' --> 5
4 -- '\n' --> 4
4 -- ')' --> 3
4 -- '(' --> 2
4 -- ' ' --> 1
3 -- '\t' --> 5
3 -- '\n' --> 4
3 -- ')' --> 3
3 -- '(' --> 2
3 -- ' ' --> 1
2 -- '\t' --> 5
2 -- '\n' --> 4
2 -- ')' --> 3
2 -- '(' --> 2
2 -- ' ' --> 1
1 -- '\t' --> 5
1 -- '\n' --> 4
1 -- ')' --> 3
1 -- '(' --> 2
1 -- ' ' --> 1
0 -- '\t' --> 5
0 -- '\n' --> 4
0 -- ')' --> 3
0 -- '(' --> 2
0 -- ' ' --> 1
))

(Items associated with DFA states:
0 :(
[s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws -> . ws ; ws]
[s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws'end]
[s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws]
[s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws -> . ws ; ws]
[s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws'end]
[s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws]
[s1 -> . s s1_opt_1 ; s'end]
[s1 -> . s s1_opt_1 ; s]
[s1 -> s . s1_opt_1 ; s1_opt_1 -> . ws ; ws]
[s1 -> s . s1_opt_1 ; s1_opt_1'end]
[s1 -> s . s1_opt_1 ; s1_opt_1]
[s1'end]
[s1])
1 :(
[s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws -> . ws ; ws -> ' ' .]
[s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws -> . ws ; ws'end]
[s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws -> . ws ; ws]
[s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws'end]
[s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws -> . ws ; ws -> ' ' .]
[s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws -> . ws ; ws'end]
[s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws -> . ws ; ws]
[s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws'end]
[s1 -> s . s1_opt_1 ; s1_opt_1 -> . ws ; ws -> ' ' .]
[s1 -> s . s1_opt_1 ; s1_opt_1 -> . ws ; ws'end]
[s1 -> s . s1_opt_1 ; s1_opt_1 -> . ws ; ws]
[s1 -> s . s1_opt_1 ; s1_opt_1'end]
[s1'end])
2 :(
[s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws -> . ws ; ws]
[s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws'end]
[s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws]
[s1 -> . s s1_opt_1 ; s -> opt_ws '(' . s opt_ws ')']
[s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws -> . ws ; ws]
[s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws'end]
[s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws]
[s1 -> . s s1_opt_1 ; s'end]
[s1 -> . s s1_opt_1 ; s]
[s1 -> s . s1_opt_1 ; s1_opt_1 -> . ws ; ws]
[s1 -> s . s1_opt_1 ; s1_opt_1'end]
[s1 -> s . s1_opt_1 ; s1_opt_1]
[s1'end])
3 :(
[s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws -> . ws ; ws]
[s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws'end]
[s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws]
[s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws -> . ws ; ws]
[s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws'end]
[s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws]
[s1 -> . s s1_opt_1 ; s -> opt_ws '(' s opt_ws ')' .]
[s1 -> . s s1_opt_1 ; s'end]
[s1 -> . s s1_opt_1 ; s]
[s1 -> s . s1_opt_1 ; s1_opt_1 -> . ws ; ws]
[s1 -> s . s1_opt_1 ; s1_opt_1'end]
[s1 -> s . s1_opt_1 ; s1_opt_1]
[s1'end])
4 :(
[s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws -> . ws ; ws -> '\n' .]
[s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws -> . ws ; ws'end]
[s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws -> . ws ; ws]
[s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws'end]
[s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws -> . ws ; ws -> '\n' .]
[s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws -> . ws ; ws'end]
[s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws -> . ws ; ws]
[s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws'end]
[s1 -> s . s1_opt_1 ; s1_opt_1 -> . ws ; ws -> '\n' .]
[s1 -> s . s1_opt_1 ; s1_opt_1 -> . ws ; ws'end]
[s1 -> s . s1_opt_1 ; s1_opt_1 -> . ws ; ws]
[s1 -> s . s1_opt_1 ; s1_opt_1'end]
[s1'end])
5 :(
[s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws -> . ws ; ws -> '\t' .]
[s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws -> . ws ; ws'end]
[s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws -> . ws ; ws]
[s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws'end]
[s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws -> . ws ; ws -> '\t' .]
[s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws -> . ws ; ws'end]
[s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws -> . ws ; ws]
[s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws'end]
[s1 -> s . s1_opt_1 ; s1_opt_1 -> . ws ; ws -> '\t' .]
[s1 -> s . s1_opt_1 ; s1_opt_1 -> . ws ; ws'end]
[s1 -> s . s1_opt_1 ; s1_opt_1 -> . ws ; ws]
[s1 -> s . s1_opt_1 ; s1_opt_1'end]
[s1'end])
)
(Prules associated with DFA states:
(4 :
 odot : ' ' -> ws
 odot : '\n' -> ws
 odot : '\t' -> ws
 odot : ws ws -> ws
)
(5 :
 odot : ' ' -> ws
 odot : '\n' -> ws
 odot : '\t' -> ws
 odot : ws ws -> ws
)
(1 :
 odot : ' ' -> ws
 odot : '\n' -> ws
 odot : '\t' -> ws
 odot : ws ws -> ws
)
(3 :
 S : opt_ws #'(' s opt_ws #')' -> s
 S/1 : -> s
 S/2 : s s -> s
 S1_0 : ws -> s1_opt_1
 S1_1 : -> s1_opt_1
 odot : -> opt_ws
 odot : ' ' -> ws
 odot : '\n' -> ws
 odot : '\t' -> ws
 odot : ws -> opt_ws
 odot : ws ws -> ws
)
(2 :
 S : opt_ws #'(' s opt_ws #')' -> s
 S/1 : -> s
 S/2 : s s -> s
 S1_0 : ws -> s1_opt_1
 S1_1 : -> s1_opt_1
 odot : -> opt_ws
 odot : ' ' -> ws
 odot : '\n' -> ws
 odot : '\t' -> ws
 odot : ws -> opt_ws
 odot : ws ws -> ws
)
(0 :
 S : opt_ws #'(' s opt_ws #')' -> s
 S/1 : -> s
 S/2 : s s -> s
 S1 : s s1_opt_1 -> s1
 S1_0 : ws -> s1_opt_1
 S1_1 : -> s1_opt_1
 odot : -> opt_ws
 odot : ' ' -> ws
 odot : '\n' -> ws
 odot : '\t' -> ws
 odot : ws -> opt_ws
 odot : ws ws -> ws
)
))
(The state map is:
[ 1 5 6 7 10 13 14 15 18 21 22 23 26 ] -> 4
[ 1 5 6 7 9 13 14 15 17 21 22 23 25 ] -> 5
[ 1 5 6 7 8 13 14 15 16 21 22 23 24 ] -> 1
[ 1 2 3 4 5 6 12 13 14 19 20 21 22 ] -> 3
[ 1 2 3 4 5 6 11 12 13 14 20 21 22 ] -> 2
[ 0 1 2 3 4 5 6 12 13 14 20 21 22 ] -> 0)

(The minimized deterministic automaton:
(Automaton
(Start state: 0)
(Final states: 0)
(Number of states 1)
(Transitions:
0 -- '\t' --> 0
0 -- '\n' --> 0
0 -- ')' --> 0
0 -- '(' --> 0
0 -- ' ' --> 0
))

(Items associated with Min DFA states:
0 :(
[s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws -> . ws ; ws -> ' ' .]
[s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws -> . ws ; ws -> '\n' .]
[s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws -> . ws ; ws -> '\t' .]
[s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws -> . ws ; ws'end]
[s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws -> . ws ; ws]
[s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws'end]
[s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws]
[s1 -> . s s1_opt_1 ; s -> opt_ws '(' . s opt_ws ')']
[s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws -> . ws ; ws -> ' ' .]
[s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws -> . ws ; ws -> '\n' .]
[s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws -> . ws ; ws -> '\t' .]
[s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws -> . ws ; ws'end]
[s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws -> . ws ; ws]
[s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws'end]
[s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws]
[s1 -> . s s1_opt_1 ; s -> opt_ws '(' s opt_ws ')' .]
[s1 -> . s s1_opt_1 ; s'end]
[s1 -> . s s1_opt_1 ; s]
[s1 -> s . s1_opt_1 ; s1_opt_1 -> . ws ; ws -> ' ' .]
[s1 -> s . s1_opt_1 ; s1_opt_1 -> . ws ; ws -> '\n' .]
[s1 -> s . s1_opt_1 ; s1_opt_1 -> . ws ; ws -> '\t' .]
[s1 -> s . s1_opt_1 ; s1_opt_1 -> . ws ; ws'end]
[s1 -> s . s1_opt_1 ; s1_opt_1 -> . ws ; ws]
[s1 -> s . s1_opt_1 ; s1_opt_1'end]
[s1 -> s . s1_opt_1 ; s1_opt_1]
[s1'end]
[s1])
)
(Prules associated with Min DFA states:
(0 :
 S : opt_ws #'(' s opt_ws #')' -> s
 S/1 : -> s
 S/2 : s s -> s
 S1 : s s1_opt_1 -> s1
 S1_0 : ws -> s1_opt_1
 S1_1 : -> s1_opt_1
 odot : -> opt_ws
 odot : ' ' -> ws
 odot : '\n' -> ws
 odot : '\t' -> ws
 odot : ws -> opt_ws
 odot : ws ws -> ws
)
))
(The state map is:
[ 0 1 2 3 4 5 ] -> 0)

(The minimized deterministic reverse automaton:
(Automaton
(Start state: 0)
(Final states: 0)
(Number of states 1)
(Transitions:
0 -- '\t' --> 0
0 -- '\n' --> 0
0 -- ')' --> 0
0 -- '(' --> 0
0 -- ' ' --> 0
))

(Items associated with Reverse Min DFA states:
0 :(
[s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws -> . ws ; ws -> ' ' .]
[s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws -> . ws ; ws -> '\n' .]
[s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws -> . ws ; ws -> '\t' .]
[s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws -> . ws ; ws'end]
[s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws -> . ws ; ws]
[s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws'end]
[s1 -> . s s1_opt_1 ; s -> . opt_ws '(' s opt_ws ')' ; opt_ws]
[s1 -> . s s1_opt_1 ; s -> opt_ws '(' . s opt_ws ')']
[s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws -> . ws ; ws -> ' ' .]
[s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws -> . ws ; ws -> '\n' .]
[s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws -> . ws ; ws -> '\t' .]
[s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws -> . ws ; ws'end]
[s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws -> . ws ; ws]
[s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws'end]
[s1 -> . s s1_opt_1 ; s -> opt_ws '(' s . opt_ws ')' ; opt_ws]
[s1 -> . s s1_opt_1 ; s -> opt_ws '(' s opt_ws ')' .]
[s1 -> . s s1_opt_1 ; s'end]
[s1 -> . s s1_opt_1 ; s]
[s1 -> s . s1_opt_1 ; s1_opt_1 -> . ws ; ws -> ' ' .]
[s1 -> s . s1_opt_1 ; s1_opt_1 -> . ws ; ws -> '\n' .]
[s1 -> s . s1_opt_1 ; s1_opt_1 -> . ws ; ws -> '\t' .]
[s1 -> s . s1_opt_1 ; s1_opt_1 -> . ws ; ws'end]
[s1 -> s . s1_opt_1 ; s1_opt_1 -> . ws ; ws]
[s1 -> s . s1_opt_1 ; s1_opt_1'end]
[s1 -> s . s1_opt_1 ; s1_opt_1]
[s1'end]
[s1])
)
(Prules associated with Reverse Min DFA states:
(0 :
 S : opt_ws #'(' s opt_ws #')' -> s
 S/1 : -> s
 S/2 : s s -> s
 S1 : s s1_opt_1 -> s1
 S1_0 : ws -> s1_opt_1
 S1_1 : -> s1_opt_1
 odot : -> opt_ws
 odot : ' ' -> ws
 odot : '\n' -> ws
 odot : '\t' -> ws
 odot : ws -> opt_ws
 odot : ws ws -> ws
)
))
(We are stopping after minimizing the DFA, because the --lang-only flag was given.)

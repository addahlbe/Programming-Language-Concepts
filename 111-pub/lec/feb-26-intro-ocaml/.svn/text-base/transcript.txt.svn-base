ephesus:~/class/2013/111-pub/lec/feb-26-intro-ocaml$ minp
ephesus:feb-26-intro-ocaml$ 
ephesus:feb-26-intro-ocaml$ 
ephesus:feb-26-intro-ocaml$ 
ephesus:feb-26-intro-ocaml$ ocaml
        Objective Caml version 3.12.0

# 3;;
- : int = 3
# 1+2;;
- : int = 3
# 1*10;;
- : int = 10
# 2*10;;
- : int = 20
# 2.1 * 2.0;;
Characters 0-3:
  2.1 * 2.0;;
  ^^^
Error: This expression has type float but an expression was expected of type
         int
# 2.1 *. 2.0;;
- : float = 4.2
# *;;
Characters 0-1:
  *;;
  ^
Error: Syntax error
# (*);;
Characters 0-3:
  (*);;
  ^^^
Warning 1: this is the start of a comment.
* ( * );;
* 
Characters 0-3:
  (*);;
  ^^^
Error: Comment not terminated
# ( * );;
- : int -> int -> int = <fun>
# (*   comment *) 3;;
- : int = 3
# ( * );;
- : int -> int -> int = <fun>
# *;;
Characters 0-1:
  *;;
  ^
Error: Syntax error
# ( *. );;
- : float -> float -> float = <fun>
# 3000000000000000000000;;
Characters 0-22:
  3000000000000000000000;;
  ^^^^^^^^^^^^^^^^^^^^^^
Error: Integer literal exceeds the range of representable integers of type int
# 30 *100 * 100 * 100 *100 * 100 * 100 * 100 * 100 ;;
- : int = 300000000000000000
# 30 *100 * 100 * 100 *100 * 100 * 100 * 100 * 100 * 1000000 ;;
- : int = 601129261562068992
# 30l
  ;;
- : int32 = 30l
# 30l;;
- : int32 = 30l
# ( *l );;
Characters 3-4:
  ( *l );;
     ^
Error: Syntax error
# ( * ) ;;
- : int -> int -> int = <fun>
# ( *. ) ;;
- : float -> float -> float = <fun>
# 3;;
- : int = 3
# 2.1;;
- : float = 2.1
# 3 * 2.1;; 
Characters 4-7:
  3 * 2.1;; 
      ^^^
Error: This expression has type float but an expression was expected of type
         int
# 
  
  
  
  (+);;
- : int -> int -> int = <fun>
# 3+3;;
- : int = 6
# (+);;
- : int -> int -> int = <fun>
# (+) 3;;
- : int -> int = <fun>
# let f = (+) 3;;
val f : int -> int = <fun>
# f 5;;
- : int = 8
# f 6;;
- : int = 9
# f 7;;
- : int = 10
# let f x = (+) 3 x;;
val f : int -> int = <fun>
# let f x = 3 + x;;
val f : int -> int = <fun>
# f;;
- : int -> int = <fun>
# f 3;;
- : int = 6
# f 4;;
- : int = 7
# let x = 3;;
val x : int = 3
# x;;
- : int = 3
# x+x;;
- : int = 6
# let f x = if x = 0 then 1 else 2;;
val f : int -> int = <fun>
# f 0;;
- : int = 1
# f 100;;
- : int = 2
# "hi" = "hi";;
- : bool = true
# "hi" == "hi";;
- : bool = false
# 